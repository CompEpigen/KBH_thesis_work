#configfile: "config.yaml"
#Will need location of fast5 files, flowcell, kit, ref genome
SAMPLES = ['PDX661', 'Kuromochi', 'SKOU3', 'Ovise', '0AW42']

import os

def activate_environment():
    os.system("module load samtools/1.9")
    os.system("module load anaconda3/2019.07")
    os.system("source activate pycoqc")

activate_environment()

rule all:
    input:
        expand("output/{sample}_pycoQC_output.html", sample=SAMPLES),
        expand("output/{sample}.merged.fastq", sample=SAMPLES),
        expand("output/{sample}.merged.fastq.index.gzi", sample=SAMPLES),
        expand("output/{sample}.merged.fastq.index.fai", sample=SAMPLES),
        expand("output/{sample}.merged.fastq.index.readdb", sample=SAMPLES),
        expand("output/{sample}.sorted.bam", sample=SAMPLES),
        expand("output/{sample}.sorted.bam.bai", sample=SAMPLES),
        expand("output/{sample}.meth_calls.tsv", sample=SAMPLES),
        expand("output/{sample}.meth_freq.tsv", sample=SAMPLES)

rule pycoqc:
    input:
        "/icgc/dkfzlsdf/analysis/C010/brooks/nanopore_basecalled/{sample}/hac_cfg/sequencing_summary.txt"
    output:
        "output/{sample}_pycoQC_output.html"
    params:
        jobname="QC",
        runtime="4:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "pycoQC -f {input} -o {output}"

rule merge_fastqs:
    input:
        "/icgc/dkfzlsdf/analysis/C010/brooks/nanopore_basecalled/{sample}/hac_cfg/"
    output:
        "output/{sample}.merged.fastq"
    params:
        jobname="merge_fqs",
        runtime="5:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "cat {input}/*.fastq > {output}"

rule index:
    input:
        f5s="/icgc/dkfzlsdf/analysis/C010/brooks/nanopore_raw/{sample}/fast5/", #need to change this, might be an issue when working with PDX661 sample
        fq="output/{sample}.merged.fastq"
    output:
        "output/{sample}.merged.fastq.index",
        "output/{sample}.merged.fastq.index.gzi",
        "output/{sample}.merged.fastq.index.fai",
        "output/{sample}.merged.fastq.index.readdb"
    params:
        jobname="index_reads",
        runtime="12:00",
        memusage="5000",
        slots="10",
        misc=" "
    shell:
        "f5c index -d {input.f5s} {input.fq}"

rule minimap2_align:
    input:
        ref="/icgc/dkfzlsdf/analysis/C010/brooks/GCF_000001405.26_GRCh38_genomic.fna",
        fq="output/{sample}.merged.fastq"
    output:
        "output/{sample}.sorted.bam"
    params:
        jobname="index_reads",
        runtime="8:00",
        memusage="20000",
        slots="10",
        misc=" "
    shell:
        "minimap2 -t {params.slots} -ax map-ont {input.ref} {input.fq} | samtools sort -T {wildcards.sample} -o {output}"

rule index_bams:
    input:
        "output/{sample}.sorted.bam"
    output:
        "output/{sample}.sorted.bam.bai"
    params:
        jobname="index_bams",
        runtime="8:00",
        memusage="20000",
        slots="1",
        misc=" "
    shell:
        "samtools index {input}"

rule call_meth:
    input:
        bam="output/{sample}.sorted.bam",
        bai="output/{sample}.sorted.bam.bai",
        ref="/icgc/dkfzlsdf/analysis/C010/brooks/GCF_000001405.26_GRCh38_genomic.fna",
        fq="output/{sample}.merged.fastq",
        index="output/{sample}.merged.fastq.index",
        fai="output/{sample}.merged.fastq.index.fai",
        gzi="output/{sample}.merged.fastq.index.gzi",
        readdb="output/{sample}.merged.fastq.index.readdb"
    output:
        "output/{sample}.meth_calls.tsv"
    params:
        jobname="call_meth",
        runtime="24:00",
        memusage="10000",
        slots="10",
        misc=" "
    shell:
        "f5c call-methylation -t 10 -r {input.fq} -b {input.bam} -g {input.ref} > {output}"

rule calc_freq:
    input:
        "output/{sample}.meth_calls.tsv"
    output:
        "output/{sample}.meth_freq.tsv"
    params:
        jobname="calc_freq",
        runtime="8:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "f5c meth-freq -i {input} -o {output} -s"

#Add in variant calling rule here!
#rule call_vars:
#    input:
#    output:
#    params:
#    shell:
#    """
#    source activate /icgc/dkfzlsdf/analysis/C010/brooks/variant_calling/clair-env
#    CLAIR='/icgc/dkfzlsdf/analysis/C010/brooks/variant_calling/clair-env/bin/clair.py'
#    MODEL="/icgc/dkfzlsdf/analysis/C010/brooks/variant_calling/ont/model"                                     # e.g. [PATH_TO_CLAIR_MODEL]/ont/model
#    BAM_FILE_PATH="/icgc/dkfzlsdf/analysis/C010/brooks/del_detect/bam_slicing/all_del_merged.bam"                          # e.g. chr21.bam
#    REFERENCE_FASTA_FILE_PATH="/icgc/dkfzlsdf/analysis/C010/brooks/GCF_000001405.26_GRCh38_genomic.fna"  # e.g. chr21.fa
#    VARIANT_CALLING_OUTPUT_PATH="/icgc/dkfzlsdf/analysis/C010/brooks/variant_calling/output/chr17.vcf"
#
#    CONTIG_NAME="NC_000017.11"          # e.g. chr21
#    SAMPLE_NAME="chr17_test"
#    
#    python3 $CLAIR callVarBam \
#    --chkpnt_fn "$MODEL" \
#    --ref_fn "$REFERENCE_FASTA_FILE_PATH" \
#    --bam_fn "$BAM_FILE_PATH" \
#    --ctgName "$CONTIG_NAME" \
#    --sampleName "$SAMPLE_NAME" \
#    --call_fn "$VARIANT_CALLING_OUTPUT_PATH"
#    """