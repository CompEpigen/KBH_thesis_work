#configfile: "config.yaml"
#sample = config["samples"]
SAMPLES = ["FAB39075-4246400039_Multi_SQK-LSK108_WA01", "FAB39088-288418386_Multi_SQK-LSK108_WA01", "FAB49164-4045668814_Multi_SQK-LSK108_WA01", "FAB42316-216722908_Multi_SQK-LSK108_WA01", "FAB42451-4239353418_Multi_SQK-LSK108_WA01", "FAB42473-4179682758_Multi_SQK-LSK108_WA01", "FAB44989-2567311907_Multi_SQK-LSK108_WA01", "FAB45271-152889212_Multi_SQK-LSK108_WA01", "FAB45277-86567043_Multi_SQK-LSK108_WA01", "FAB45332-551111640_Multi_SQK-LSK108_WA01", "FAB49712-622291475_Multi_SQK-LSK108_WA01", "FAB49908-481119249_Multi_SQK-LSK108_WA01", "FAB49914-3775529215_Multi_SQK-LSK108_WA01", "FAF01127-353303576_Multi_SQK-LSK108_WA01", "FAF01132-84868110_Multi_SQK-LSK108_WA01", "FAF01169-4245879798_Multi_SQK-LSK108_WA01", "FAF01253-83756522_Multi_SQK-LSK108_WA01", "FAF05869-87644245_Multi_SQK-LSK108_WA01", "FAF18554-4178920553_Multi_SQK-LSK108_WA01"]

import os

def activate_environment():
    os.system("module load samtools/1.9")
    #os.system("module load anaconda3/2019.07")
    #os.system("conda activate pycometh") #need to change to pycometh env

activate_environment()

rule all:
    input:
        expand("data/{sample}.merged.fq", sample=SAMPLES), #, sample=samples.split(', ')
        expand("data/{sample}.merged.fq.index", sample=SAMPLES),
        expand("data/{sample}.merged.fq.index.gzi", sample=SAMPLES),
        expand("data/{sample}.merged.fq.index.fai", sample=SAMPLES),
        expand("data/{sample}.merged.fq.index.readdb", sample=SAMPLES),
        expand("output/mapped/{sample}.sorted.bam", sample=SAMPLES),
        expand("output/mapped/{sample}.sorted.bam.bai", sample=SAMPLES),
        expand("output/meth/{sample}.meth_calls.tsv", sample=SAMPLES),
        expand("output/meth/{sample}.meth_freq.tsv", sample=SAMPLES)

rule merge_fastqs:
    input:
        "/icgc/dkfzlsdf/analysis/C010/mayerma/methylation_analysis/fastq/"
    output:
        "data/{sample}.merged.fq"
    params:
        jobname="merged_fqs",
        runtime="1:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "cat /icgc/dkfzlsdf/analysis/C010/mayerma/methylation_analysis/fastq/{wildcards.sample}_*.fq > {output}"

rule index_reads:
    input:
        #f5="data/{sample}_guppy/",
        f5="/icgc/dkfzlsdf/analysis/C010/mayerma/methylation_analysis/raw/{sample}/guppy/",
        fq="data/{sample}.merged.fq"
    output:
        "data/{sample}.merged.fq.index",
        "data/{sample}.merged.fq.index.gzi",
        "data/{sample}.merged.fq.index.fai",
        "data/{sample}.merged.fq.index.readdb"
    params:
        jobname="index_reads",
        runtime="8:00",
        memusage="5000",
        slots="10",
        misc=" "
    shell:
        "f5c index -d {input.f5} {input.fq}"

rule ngmlr_align:
    input:
        ref="GCF_000001405.26_GRCh38_genomic.fna",
        fq="data/{sample}.merged.fq"
    output:
        "output/mapped/{sample}.sorted.bam"
    params:
        jobname="index_reads",
        runtime="16:00",
        memusage="20000",
        slots="15",
        misc=" "
    shell:
        "ngmlr -t 15 -r {input.ref} -q {input.fq} -x ont | samtools sort -T {wildcards.sample}.tmp -o {output}"

#Needed to up the time/slots for some of the samples for the above rule, so I may want to look at replacing NGMLR with minimap2

rule index_bams:
    input:
        "output/mapped/{sample}.sorted.bam"
    output:
        "output/mapped/{sample}.sorted.bam.bai"
    params:
        jobname="index_bams",
        runtime="8:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "samtools index {input}"

rule call_meth:
    input:
        bam="output/mapped/{sample}.sorted.bam",
        bai="output/mapped/{sample}.sorted.bam.bai",
        ref="GCF_000001405.26_GRCh38_genomic.fna",
        fq="data/{sample}.merged.fq",
        index="data/{sample}.merged.fq.index",
        fai="data/{sample}.merged.fq.index.fai",
        gzi="data/{sample}.merged.fq.index.gzi",
        readdb="data/{sample}.merged.fq.index.readdb"
    output:
        "output/meth/{sample}.meth_calls.tsv"
    params:
        jobname="call_meth",
        runtime="24:00",
        memusage="10000",
        slots="10",
        misc=" "
    shell:
        "f5c call-methylation -t 10 -r {input.fq} -b {input.bam} -g {input.ref} > {output}"

rule calc_freq:
    input:
        "output/meth/{sample}.meth_calls.tsv"
    output:
        "output/meth/{sample}.meth_freq.tsv"
    params:
        jobname="calc_freq",
        runtime="8:00",
        memusage="5000",
        slots="1",
        misc=" "
    shell:
        "f5c meth-freq -i {input} -o {output} -s"



